name: Build GitHub Releases
on:
  push:
    tags-ignore:
    - versio-prev
jobs:
  generate-list:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.4
      name: Checkout the repository
      with:
        lfs: true
    - uses: actions/cache@v2.1.5
      name: Cache cargo dependencies
      with:
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        path: |
          .cache
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
    - uses: actions-rs/toolchain@v1.0.7
      name: Install rust toolchain
      with:
        default: true
        profile: minimal
        toolchain: stable
    - uses: actions-rs/cargo@v1.0.3
      name: Build release version
      with:
        args: --release --locked
        command: build
    - run: wget -O systemsPopulated.json.gz  https://www.edsm.net/dump/systemsPopulated.json.gz
    - run: ./runners/generate-all-combinations
    - uses: actions/upload-artifact@v2
      name: Store built version
      with:
        name: potential-faction-systems
        path: potential-faction-systems*.txt
  build:
    runs-on: ${{ matrix.os }}
    steps:
    - run: ${{ matrix.install }}
      env:
        DEBIAN_FRONTEND: noninteractive
      name: Install additional dependencies
    - uses: actions/checkout@v2.3.4
      name: Checkout the repository
      with:
        lfs: true
    - uses: actions/cache@v2.1.5
      name: Cache cargo dependencies
      with:
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        path: |
          .cache
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
    - uses: actions-rs/toolchain@v1.0.7
      name: Install rust toolchain
      with:
        default: true
        profile: minimal
        toolchain: stable
    - uses: actions-rs/cargo@v1.0.3
      name: Build release version
      with:
        args: --release --locked
        command: build
    - id: get_repository_name
      name: Calculate repository name
      run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk
        -F / '{print $2}' | sed -e "s/:refs//")
      shell: bash
    - name: Move binary to upload location
      env:
        TARGET: ${{ matrix.target }}
        EXTENSION: ${{ matrix.suffix }}
        REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
      run: mv ./target/release/$REPOSITORY_NAME$EXTENSION ./$REPOSITORY_NAME-$TARGET$EXTENSION
      shell: bash
    - uses: actions/upload-artifact@v2
      name: Store built binary version
      with:
        name: bins
        path: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-${{ matrix.target
          }}${{ matrix.suffix }}
    strategy:
      matrix:
        include:
        - os: macos-latest
          suffix: ''
          target: x86_64-apple-darwin
          install: ''
        - os: ubuntu-latest
          suffix: ''
          target: x86_64-unknown-linux-gnu
          install: ''
        - os: windows-latest
          suffix: .exe
          target: x86_64-pc-windows-msvc
          install: ''
  release:
    needs:
    - generate-list
    - build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.4
      name: Checkout the repository
      with:
        lfs: true
        fetch-depth: 0
    - uses: actions/cache@v2.1.5
      name: Cache cargo dependencies
      with:
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        path: |
          .cache
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
    - uses: actions/download-artifact@v2
      name: Retrieve assets
    - uses: actions-rs/toolchain@v1.0.7
      name: Install rust toolchain
      with:
        default: true
        profile: minimal
        toolchain: stable
    - id: get_previous_version
      name: Calculate previous version
      run: echo ::set-output name=PREVIOUS_VERSION::$(git tag | sort --version-sort
        | tail -n 3 | head -n 1)
      shell: bash
    - uses: actions-rs/cargo@v1.0.3
      name: Install TOML Reader
      with:
        args: toml-cli
        command: install
    - id: get_repository_name
      name: Calculate repository name
      run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk
        -F / '{print $2}' | sed -e "s/:refs//")
      shell: bash
    - id: get_version
      name: Calculate current version number
      run: echo ::set-output name=VERSION::v$(toml get Cargo.toml package.version
        | tail -c +2 | head -c -2)
      shell: bash
    - uses: dlavrenuek/conventional-changelog-action@v1.1.1
      id: changelog
      with:
        from: ${{ steps.get_previous_version.outputs.PREVIOUS_VERSION }}
        to: ${{ steps.get_version.outputs.VERSION }}
    - env:
        GITHUB_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
      id: create_release
      uses: ncipollo/release-action@v1.8.6
      with:
        allowUpdates: true
        token: ${{ secrets.COMMITTER_TOKEN }}
        body: ${{ steps.changelog.outputs.body }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        tag: ${{ steps.get_version.outputs.VERSION }}
        artifacts: ./potential-faction-systems/*,./bins/*
