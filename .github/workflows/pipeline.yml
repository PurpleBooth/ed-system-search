name: Pipeline
on:
  push:
    branches:
    - '*'
  pull_request:
jobs:
  lint-markdown:
    uses: PurpleBooth/common-pipelines/.github/workflows/markdown-check.yml@main
  commit-checks:
    uses: PurpleBooth/common-pipelines/.github/workflows/commit-check.yml@main
  rust-checks:
    uses: PurpleBooth/common-pipelines/.github/workflows/rust-check.yml@main
    with:
      run_on_windows: false
  specdown:
    uses: PurpleBooth/common-pipelines/.github/workflows/specdown-check.yml@main
    with:
      run_on_windows: false

  release:
    if: github.ref == 'refs/heads/main'
    needs:
    - lint-markdown
    - commit-checks
    - rust-checks
    - specdown
    outputs:
      version_bump: ${{ steps.version_bump.outputs.version_bump }}
      current_version: ${{ steps.current_version.outputs.current_version }}
      previous_version: ${{ steps.previous_version.outputs.previous_version }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.4.0
      with:
        token: ${{ secrets.COMMITTER_TOKEN }}
        fetch-depth: 0
    - uses: chaaz/versio-actions/install@v1.2
      name: Install versio
    - id: previous_version
      run: echo ::set-output "name=previous_version::$( versio get --id 1 -v )"
      env:
        GITHUB_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
        GITHUB_USER: ${{ github.actor }}

    - run: echo ::set-output "name=BUMP::$( versio release --dry-run )"
      id: get_versio_plan
      env:
        GITHUB_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
        GITHUB_USER: ${{ github.actor }}

    - name: Generate release
      if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
      run: |
        versio release
      env:
        GITHUB_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
        GITHUB_USER: ${{ github.actor }}
        RUST_LOG: versio=trace
        RUST_BACKTRACE: 1
    - run: echo ::set-output "name=current_version::$( versio get --id 1 -v )"
      id: current_version
      env:
        GITHUB_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
        GITHUB_USER: ${{ github.actor }}
    - run: echo ::set-output "name=version_bump::true"
      if: steps.current_version.outputs.current_version != steps.previous_version.outputs.previous_version
      id: version_bump

  cargo-publish:
    needs:
    - release
    runs-on: ubuntu-latest
    if: needs.release.outputs.version_bump
    steps:
    - uses: actions/checkout@v2.4.0
      name: Checkout the repository
      with:
        ref: v${{ needs.release.outputs.current_version }}
    - name: Generate release
      run: |
        cargo login "$CARGO_TOKEN"
        cargo publish
      env:
        CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}

  generate-system-list:
    if: needs.release.outputs.version_bump
    needs:
    - release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.4.0
      name: Checkout the repository
      with:
        ref: v${{ needs.release.outputs.current_version }}
    - uses: actions/cache@v2.1.7
      name: Cache cargo dependencies
      with:
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        path: |
          .cache
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
    - uses: actions-rs/toolchain@v1.0.7
      name: Install rust toolchain
      with:
        default: true
        profile: minimal
        toolchain: stable
    - uses: actions-rs/cargo@v1.0.3
      name: Build release version
      with:
        args: --release --locked
        command: build
    - run: wget -O systemsPopulated.json.gz  https://www.edsm.net/dump/systemsPopulated.json.gz
    - run: ./runners/generate-all-combinations
    - uses: actions/upload-artifact@v2
      name: Store built version
      with:
        name: potential-faction-systems
        path: potential-faction-systems*.txt

  build-release:
    if: needs.release.outputs.version_bump
    runs-on: ${{ matrix.os }}
    needs:
    - release
    steps:
    - run: ${{ matrix.install }}
      env:
        DEBIAN_FRONTEND: noninteractive
      name: Install additional dependencies
    - uses: actions/checkout@v2.4.0
      name: Checkout the repository
      with:
        ref: v${{ needs.release.outputs.current_version }}
    - uses: actions/cache@v2.1.7
      name: Cache cargo dependencies
      with:
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        path: |
          .cache
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
    - uses: actions-rs/toolchain@v1.0.7
      name: Install rust toolchain
      with:
        default: true
        profile: minimal
        toolchain: stable
    - uses: actions-rs/cargo@v1.0.3
      name: Build release version
      with:
        args: --release --locked
        command: build
    - id: get_repository_name
      name: Calculate repository name
      run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk
        -F / '{print $2}' | sed -e "s/:refs//")
      shell: bash
    - name: Move binary to upload location
      env:
        TARGET: ${{ matrix.target }}
        EXTENSION: ${{ matrix.suffix }}
        REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
      run: mv ./target/release/$REPOSITORY_NAME$EXTENSION ./$REPOSITORY_NAME-$TARGET$EXTENSION
      shell: bash
    - uses: actions/upload-artifact@v2
      name: Store built binary version
      with:
        name: bins
        path: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-${{ matrix.target
          }}${{ matrix.suffix }}
    strategy:
      matrix:
        include:
        - os: macos-latest
          suffix: ''
          target: x86_64-apple-darwin
          install: ''
        - os: ubuntu-latest
          suffix: ''
          target: x86_64-unknown-linux-gnu
          install: ''
        - os: windows-latest
          suffix: .exe
          target: x86_64-pc-windows-msvc
          install: ''

  upload-release:
    if: needs.release.outputs.version_bump
    needs:
    - generate-system-list
    - build-release
    - release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.4.0
      name: Checkout the repository
      with:
        lfs: true
        fetch-depth: 0
        ref: v${{ needs.release.outputs.current_version }}
    - uses: actions/cache@v2.1.7
      name: Cache cargo dependencies
      with:
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        path: |
          .cache
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
    - uses: actions/download-artifact@v2
      name: Retrieve assets
    - uses: PurpleBooth/changelog-action@v0.3.0
      name: Generate changelog
      with:
        args: -v v${{ needs.release.outputs.previous_version }}..v${{ needs.release.outputs.current_version
          }}
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: create_release
      uses: ncipollo/release-action@v1.9.0
      with:
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        bodyFile: CHANGELOG.md
        name: Release ${{ steps.get_version.outputs.VERSION }}
        tag: v${{ needs.release.outputs.current_version }}
        artifacts: ./potential-faction-systems/*,./bins/*

  generate-formula:
    if: needs.release.outputs.version_bump
    needs:
    - release
    name: Generate Homebrew Formula
    runs-on: ubuntu-latest
    steps:
    - uses: PurpleBooth/generate-formula-action@v0.1.4
      name: Create PR for formula
      with:
        current_version: ${{ needs.release.outputs.current_version }}
        previous_version: ${{ needs.release.outputs.previous_version }}
        committer_token: ${{ secrets.COMMITTER_TOKEN }}
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}
